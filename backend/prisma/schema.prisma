// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgres" // Could be "mysql" if you're using MySQL
  url      = env("DATABASE_URL")
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum NotificationType {
  SYSTEM
  USER
}

enum SettingsType {
  DASHBOARD
  LANDING
  COMPANY_INFO
}

enum WalletType {
  FIAT
  CRYPTO
  CREDIT
  TOKEN
}

enum WalletStatus {
  ACTIVE
  INACTIVE
  DISABLED
  BLOCKED
  DELETED
}

enum ViewState {
  READ
  UNREAD
  REMOVED
  DELETED
}

enum ProfileStatus {
  DISABLED
  BANNED
  DEACTIVATED
  PAUSED
  ACTIVE
  DELETED
}

enum ListingStatus {
  AVAILABLE
  SOLD
  DELETED
  TRASHED
  LISTED
  PENDING
  INACTIVE
}

enum Platform {
  INSTAGRAM
  FACEBOOK
  TWITTER
  TIKTOK
  YOUTUBE
  OTHER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum SubscriptionType {
  PLAN
  TOPUP
}

enum PaymentFrequency {
  MONTHLY
  YEARLY
  ONE_TIME
}

enum PlanType {
  PAID
  FREE
  TRIAL
}

enum CategoryIconType {
  ICON
  SVG
  IMAGE
}

enum TransactionStatus {
  SUCCESS
  PAID
  UNPAID
  FAILED
  CANCELLED
  PENDING
  COMPLETED
  REFUNDED
}

enum OrderStatus {
  FAILED
  CANCELLED
  PENDING
  COMPLETED
  REFUNDED
}

enum TransactionPurpose {
  PLAN
  TOPUP
  PURCHASE
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CRYPTO
  CREDIT
  TOKEN
}

enum GatewayMode {
  LIVE
  SANDBOX
}

enum AttachmentForEnum {
  MESSAGE
  ROOMMESSAGE
  POST
  COMMENT
  TICKETS
  MAILER
  LISTING
  SERVICE
  NOTIFICATION
}

enum CategoryForEnum {
  POST
  LISTING
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum DocumentType {
  ID
  BUSINESS_LICENSE
  DRIVER_LICENSE
  UTILITY_BILL
  TAX_CERTIFICATE
  OTHER
}

enum RolesEnum {
  USER
  STAFF
  ADMIN
  DEV
}

enum MailerTemplateEnum {
  SIGNUP_CONFIRMATION
  LOGIN_CONFIRMATION
  PASSWORD_RESET
  ACCOUNT_VERIFICATION
  PAYMENT_RECEIPT
  SUBSCRIPTION_RENEWAL
  NEWSLETTER
  SYSTEM_NOTIFICATION
  PROMOTIONAL_OFFER
  DEFAULT
}

enum TicketCategory {
  BILLING
  TECHNICAL
  GENERAL
  ACCOUNT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  username           String   @unique
  password           String
  verificationStatus Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt()

  // Relations
  userRatings            Rating[]        @relation("userRatings")
  profile                Profile?
  roles                  Role[]
  refreshTokens          RefreshToken[]
  subscriptions          Subscription[]
  posts                  Post[]
  comments               Comment[]
  conversations          Conversation[]
  transactions           Transaction[]
  orders                 Order[]
  messagesSent           Message[]       @relation("sentMessages")
  messagesReceived       Message[]       @relation("receivedMessages")
  roomsCreated           Room[]          @relation("RoomCreator")
  rooms                  Room[]          @relation("RoomsBelongedTo")
  roomMessages           RoomMessage[]
  supportTickets         SupportTicket[]
  assignedSupportTickets SupportTicket[] @relation("assignedTickets")
  notifications          Notification[]
  wallets                Wallet[]
  savedItems             SavedItem[]
  vendor                 Vendor?
  cart                   Cart?
  contacts               Contact?
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String   @unique @db.Text()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Vendor {
  id                 String             @id @default(uuid())
  companyName        String
  contactEmail       String             @unique
  phoneNumber        String
  address            String
  status             VerificationStatus @default(PENDING) // Verification status (Pending, Verified, Rejected)
  verificationReason String? // Reason for rejection or comments on verification
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt()
  // Relations
  user               User               @relation(fields: [userId], references: [id])
  userId             String             @unique
  listings           Listing[]
  sellerRatings      Rating[]           @relation("sellerRatings")
  documents          Document[] // Linked to vendor's documents
}

model Document {
  id         String             @id @default(uuid())
  vendorId   String
  vendor     Vendor             @relation(fields: [vendorId], references: [id])
  type       DocumentType // Type of document (ID, Business License, etc.)
  fileUrl    String // URL to the uploaded document
  status     VerificationStatus @default(PENDING) // Document verification status
  reason     String? // Reason for document rejection
  uploadedAt DateTime           @default(now())
}

model Profile {
  id                 String        @id @default(uuid())
  firstName          String        @db.VarChar(80)
  middleName         String?       @db.VarChar(80)
  lastName           String?       @db.VarChar(80)
  phone              String?
  dob                String?
  gender             String?
  address            String?
  city               String?
  state              String?
  country            String?
  occupation         String?
  bio                String?
  image              String?
  authentication_2FA Boolean       @default(false)
  status             ProfileStatus @default(ACTIVE)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt()

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Team {
  id          String       @id @default(uuid())
  firstName   String       @db.VarChar(80)
  middleName  String?      @db.VarChar(80)
  lastName    String?      @db.VarChar(80)
  position    String?
  email       String?
  contact     String?
  bio         String?
  image       String?
  socialMedia Json?
  status      ActiveStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  deletedAt   DateTime?
}

model Listing {
  id            String        @id @default(uuid())
  listingStatus ListingStatus @default(LISTED)
  sellerId      String
  price         Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  deletedAt     DateTime?

  // Relations
  seller         Vendor          @relation(fields: [sellerId], references: [id])
  orders         Order[]
  // attachments    Attachment[]
  accountDetails AccountDetails?
}

model AccountDetails {
  id              String    @id @default(uuid())
  categoryId      String
  username        String
  url             String
  followers       Int
  engagementRate  Float
  averageLikes    Int
  averageComments Int
  bio             String?
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt()
  deletedAt       DateTime?
  // Relations
  listingId       String?   @unique
  listing         Listing?  @relation(fields: [listingId], references: [id])
}

model Cart {
  id     String     @id @default(uuid())
  items  CartItem[]
  userId String     @unique

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model CartItem {
  id        String @id @default(uuid())
  quantity  Int
  listingId String
  cartId    String

  // Relations
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model SavedItem {
  id        String @id @default(uuid())
  listingId String
  userId    String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Rating {
  id       String  @id @default(uuid())
  score    Int
  comment  String?
  orderId  String  @unique // Ensures a rating is tied to only one order
  sellerId String
  userId   String

  // Relations
  order  Order  @relation(fields: [orderId], references: [id])
  user   User   @relation("userRatings", fields: [userId], references: [id])
  seller Vendor @relation("sellerRatings", fields: [sellerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Transaction {
  id            String             @id @default(uuid())
  paymentMethod PaymentMethod? // Nullable
  status        TransactionStatus
  amount        Decimal
  currency      String
  purpose       TransactionPurpose
  sessionId     String
  userId        String
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt     DateTime? // Nullable, no default
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt()
}

model Order {
  id        String      @id @default(uuid())
  buyerId   String
  listingId String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt()
  // Relations
  buyer     User        @relation(fields: [buyerId], references: [id])
  listing   Listing     @relation(fields: [listingId], references: [id])
  rating    Rating?
}

model Role {
  id        String    @id @default(uuid())
  role      RolesEnum
  code      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([role, code])
}

model Contact {
  id       String   @id @default(uuid())
  contacts String[]
  // Relations
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id])
}

model Post {
  id          String        @id @default(uuid())
  title       String        @unique
  body        String        @db.Text
  description String        @db.Text
  image       String
  tags        String[]
  status      PublishStatus @default(PUBLISHED)
  readCount   BigInt
  readingTime String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  deletedAt   DateTime?

  // Relations
  categoryId String
  comments   Comment[]
  // attachments Attachment[]
  author     User      @relation(fields: [authorId], references: [id])
  // category      Category         @relation(fields: [categoryId], references: [id])
  authorId   String
}

model Comment {
  id        String        @id @default(uuid())
  subject   String
  status    PublishStatus @default(PUBLISHED)
  comment   String
  firstName String?
  lastName  String?
  email     String?
  phoneNo   String?
  for       String
  parentId  String?
  userId    String
  userType  String
  postId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  deletedAt DateTime?

  // Relations
  parent   Comment?  @relation("commentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("commentToComment")
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Category {
  id        String            @id @default(uuid())
  name      String
  status    ActiveStatus      @default(ACTIVE)
  icon      String?
  iconType  CategoryIconType?
  parentId  String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt()
  deletedAt DateTime?
  for       CategoryForEnum // Enum to differentiate between types of entities (e.g., Post, Message, etc.)

  // Relations

  parent   Category?  @relation("categoryToCategory", fields: [parentId], references: [id], onDelete: Cascade)
  children Category[] @relation("categoryToCategory")
}

model Attachment {
  id        String    @id @default(uuid())
  fileName  String
  fileType  String
  fileUrl   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  // Polymorphic fields
  targetId   String // The ID of the related entity (e.g., postId, messageId, etc.)
  targetType AttachmentForEnum // Enum to differentiate between types of entities (e.g., Post, Message, etc.)

  // Optional index for faster lookups based on both fields
  @@index([targetId, targetType])
}

model Testimonial {
  id        String       @id @default(uuid())
  userId    String       @unique
  subject   String
  body      String
  status    ActiveStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  deletedAt DateTime?
}

model Service {
  id          String       @id @default(uuid())
  title       String       @unique
  body        String       @db.Text
  description String?      @db.Text
  icon        String?
  image       String?
  tags        String[]
  status      ActiveStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  deletedAt   DateTime?

  // Relations
  // attachments Attachment[]
}

model Notification {
  id           String           @id @default(uuid())
  type         NotificationType
  notification String
  readAt       DateTime?
  status       ViewState
  receiverId   String
  // attachments  Attachment[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt()
  deletedAt    DateTime?
  // Relations
  receiver     User             @relation(fields: [receiverId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String       @id @default(uuid())
  status    ActiveStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  deletedAt DateTime?
  // Relations
  messages  Message[]
  members   User[]
}

model Message {
  id         String    @id @default(uuid())
  content    String
  state      ViewState @default(UNREAD)
  senderId   String
  receiverId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
  deletedAt  DateTime?

  // Relations
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User         @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  // attachments    Attachment[]
}

model RoomMessage {
  id        String    @id @default(uuid())
  content   String
  state     ViewState @default(UNREAD)
  senderId  String
  roomId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?

  // Relations
  sender User @relation(fields: [senderId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])
  // attachments    Attachment[]
}

model Room {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  deletedAt   DateTime?

  // Relations
  messages     RoomMessage[]
  participants User[]        @relation("RoomsBelongedTo")
  creatorId    String
  creator      User          @relation("RoomCreator", fields: [creatorId], references: [id])
}

model Wallet {
  id        String       @id @default(uuid())
  type      WalletType
  balance   Decimal      @default(0.0)
  currency  Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  status    WalletStatus @default(ACTIVE)
  // Relations
  userId    String
  user      User         @relation(fields: [userId], references: [id])
}

model MailTemplate {
  id             String          @id @default(uuid())
  template       String
  name           String
  status         ActiveStatus    @default(ACTIVE)
  emailTemplates EMailTemplate[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()
  deletedAt      DateTime?
}

model EMailTemplate {
  id         String             @id @default(uuid())
  type       MailerTemplateEnum
  template   MailTemplate       @relation(fields: [templateId], references: [id])
  templateId String
  body       String
  name       String
  context    Json
  status     ActiveStatus       @default(ACTIVE)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt()
  deletedAt  DateTime?
}

model AppSettings {
  id          String       @id @default(uuid())
  userDefined Boolean      @default(false)
  name        String       @unique
  type        SettingsType @unique
  default     Json
  settings    Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()

  @@index([type, id, name])
}

model Subscription {
  id            String             @id @default(uuid())
  userId        String
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId        String
  plan          SubscriptionPlan   @relation(fields: [planId], references: [id])
  description   String? // Nullable
  paymentMethod String? // Nullable
  status        SubscriptionStatus @default(ACTIVE)
  amount        Decimal
  currency      String
  startsAt      DateTime? // Nullable
  endsAt        DateTime? // Nullable
  cancelAt      DateTime? // Nullable
  cancelledAt   DateTime? // Nullable
  type          SubscriptionType
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt()
  deletedAt     DateTime?
}

model SubscriptionPlan {
  id            String           @id @default(uuid())
  name          String           @unique
  description   String
  planType      PlanType
  status        ActiveStatus     @default(ACTIVE)
  price         Decimal
  subscriptions Subscription[]
  frequency     PaymentFrequency
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt()
  deletedAt     DateTime?
}

model PaymentGateway {
  id                  String      @id @default(uuid())
  name                String      @unique // e.g., "Stripe", "Paystack"
  publicKey           String // Public API key or Client key
  secretKey           String // Secret API key
  webhookSecret       String? // Webhook secret key (optional)
  merchantId          String? // Optional Merchant ID for specific gateways
  mode                GatewayMode @default(LIVE) // LIVE or SANDBOX mode
  isActive            Boolean     @default(false) // Toggle to activate/deactivate
  supportedCurrencies String[] // List of currencies the gateway supports
  country             String? // Country-specific configuration (optional)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt()
  deletedAt           DateTime?
}

model SupportTicket {
  id           String         @id @default(uuid())
  ticketId     String         @unique // Unique ticket identifier
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String // Foreign key to User model
  subject      String // Subject or title of the support issue
  description  String // Detailed description of the issue
  category     TicketCategory // Enum to categorize the issue (e.g., Billing, Technical)
  priority     TicketPriority // Enum for priority level (e.g., LOW, MEDIUM, HIGH)
  status       TicketStatus   @default(OPEN) // Current status of the ticket
  assignedTo   User?          @relation("assignedTickets", fields: [assignedToId], references: [id])
  assignedToId String? // Foreign key to the assigned support staff (optional)
  resolvedAt   DateTime? // Timestamp for when the ticket was resolved
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model Faq {
  id        String       @id @default(uuid())
  question  String
  response  String
  status    ActiveStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  deletedAt DateTime?
}
